=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: ININ
http://www.inin.com

Terms of Service: https://developer.mypurecloud.com/tos

=end

require "uri"

module PureCloud
  class RoutingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_email_domain(domain_id, opts = {})
      delete_routing_email_domain_with_http_info(domain_id, opts)
      return nil
    end

    # Delete a domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_email_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_email_domain ..."
      end
      
      
      # verify the required parameter 'domain_id' is set
      fail ArgumentError, "Missing the required parameter 'domain_id' when calling RoutingApi.delete_routing_email_domain" if domain_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainId}".sub('{format}','json').sub('{' + 'domainId' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_email_domain_route(domain_name, route_id, opts = {})
      delete_routing_email_domain_route_with_http_info(domain_name, route_id, opts)
      return nil
    end

    # Delete a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_email_domain_route_with_http_info(domain_name, route_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_email_domain_route ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.delete_routing_email_domain_route" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'route_id' is set
      fail ArgumentError, "Missing the required parameter 'route_id' when calling RoutingApi.delete_routing_email_domain_route" if route_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s).sub('{' + 'routeId' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_email_domain_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete forceDelete
    # @return [nil]
    def delete_routing_queue(queue_id, opts = {})
      delete_routing_queue_with_http_info(queue_id, opts)
      return nil
    end

    # Delete a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete forceDelete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_queue_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.delete_routing_queue" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'forceDelete'] = opts[:'force_delete'] if opts[:'force_delete']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete queue member
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_queue_user(queue_id, member_id, opts = {})
      delete_routing_queue_user_with_http_info(queue_id, member_id, opts)
      return nil
    end

    # Delete queue member
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_queue_user_with_http_info(queue_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_queue_user ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.delete_routing_queue_user" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling RoutingApi.delete_routing_queue_user" if member_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users/{memberId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'memberId' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_queue_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a wrap-up code from a queue
    # 
    # @param queue_id Queue ID
    # @param code_id Code ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_queue_wrapupcode(queue_id, code_id, opts = {})
      delete_routing_queue_wrapupcode_with_http_info(queue_id, code_id, opts)
      return nil
    end

    # Delete a wrap-up code from a queue
    # 
    # @param queue_id Queue ID
    # @param code_id Code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_queue_wrapupcode_with_http_info(queue_id, code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_queue_wrapupcode ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.delete_routing_queue_wrapupcode" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.delete_routing_queue_wrapupcode" if code_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_queue_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_skill(skill_id, opts = {})
      delete_routing_skill_with_http_info(skill_id, opts)
      return nil
    end

    # Delete Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_skill_with_http_info(skill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_skill ..."
      end
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.delete_routing_skill" if skill_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills/{skillId}".sub('{format}','json').sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_skill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete utilization settings and revert to system defaults.
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_utilization(opts = {})
      delete_routing_utilization_with_http_info(opts)
      return nil
    end

    # Delete utilization settings and revert to system defaults.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_utilization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_utilization ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/utilization".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_wrapupcode(code_id, opts = {})
      delete_routing_wrapupcode_with_http_info(code_id, opts)
      return nil
    end

    # Delete wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_wrapupcode_with_http_info(code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_wrapupcode ..."
      end
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.delete_routing_wrapupcode" if code_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove routing skill from user
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_routingskill(user_id, skill_id, opts = {})
      delete_user_routingskill_with_http_info(user_id, skill_id, opts)
      return nil
    end

    # Remove routing skill from user
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_routingskill_with_http_info(user_id, skill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_user_routingskill ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.delete_user_routingskill" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.delete_user_routingskill" if skill_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills/{skillId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_user_routingskill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [InboundDomain]
    def get_routing_email_domain(domain_id, opts = {})
      data, _status_code, _headers = get_routing_email_domain_with_http_info(domain_id, opts)
      return data
    end

    # Get domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomain, Fixnum, Hash)>] InboundDomain data, response status code and response headers
    def get_routing_email_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domain ..."
      end
      
      
      # verify the required parameter 'domain_id' is set
      fail ArgumentError, "Missing the required parameter 'domain_id' when calling RoutingApi.get_routing_email_domain" if domain_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainId}".sub('{format}','json').sub('{' + 'domainId' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [InboundRoute]
    def get_routing_email_domain_route(domain_name, route_id, opts = {})
      data, _status_code, _headers = get_routing_email_domain_route_with_http_info(domain_name, route_id, opts)
      return data
    end

    # Get a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundRoute, Fixnum, Hash)>] InboundRoute data, response status code and response headers
    def get_routing_email_domain_route_with_http_info(domain_name, route_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domain_route ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.get_routing_email_domain_route" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'route_id' is set
      fail ArgumentError, "Missing the required parameter 'route_id' when calling RoutingApi.get_routing_email_domain_route" if route_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s).sub('{' + 'routeId' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domain_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get routes
    # 
    # @param domain_name email domain
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :pattern Filter routes by the route&#39;s pattern property
    # @return [InboundRouteEntityListing]
    def get_routing_email_domain_routes(domain_name, opts = {})
      data, _status_code, _headers = get_routing_email_domain_routes_with_http_info(domain_name, opts)
      return data
    end

    # Get routes
    # 
    # @param domain_name email domain
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :pattern Filter routes by the route&#39;s pattern property
    # @return [Array<(InboundRouteEntityListing, Fixnum, Hash)>] InboundRouteEntityListing data, response status code and response headers
    def get_routing_email_domain_routes_with_http_info(domain_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domain_routes ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.get_routing_email_domain_routes" if domain_name.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'pattern'] = opts[:'pattern'] if opts[:'pattern']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRouteEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domain_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get domains
    # 
    # @param [Hash] opts the optional parameters
    # @return [InboundDomainEntityListing]
    def get_routing_email_domains(opts = {})
      data, _status_code, _headers = get_routing_email_domains_with_http_info(opts)
      return data
    end

    # Get domains
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomainEntityListing, Fixnum, Hash)>] InboundDomainEntityListing data, response status code and response headers
    def get_routing_email_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domains ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomainEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email setup
    # 
    # @param [Hash] opts the optional parameters
    # @return [EmailSetup]
    def get_routing_email_setup(opts = {})
      data, _status_code, _headers = get_routing_email_setup_with_http_info(opts)
      return data
    end

    # Get email setup
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSetup, Fixnum, Hash)>] EmailSetup data, response status code and response headers
    def get_routing_email_setup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_setup ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/email/setup".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSetup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of supported languages.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_order Ascending or descending sort order (default to ASC)
    # @option opts [String] :name Name
    # @return [LanguageEntityListing]
    def get_routing_languages(opts = {})
      data, _status_code, _headers = get_routing_languages_with_http_info(opts)
      return data
    end

    # Get the list of supported languages.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_order Ascending or descending sort order
    # @option opts [String] :name Name
    # @return [Array<(LanguageEntityListing, Fixnum, Hash)>] LanguageEntityListing data, response status code and response headers
    def get_routing_languages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_languages ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['ascending', 'descending'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ascending, descending'
      end
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/languages".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']
      query_params[:'name'] = opts[:'name'] if opts[:'name']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LanguageEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details about this queue.
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def get_routing_queue(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_with_http_info(queue_id, opts)
      return data
    end

    # Get details about this queue.
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def get_routing_queue_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue" if queue_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conversation_id conversationId
    # @return [EstimatedWaitTimePredictions]
    def get_routing_queue_estimatedwaittime(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_estimatedwaittime_with_http_info(queue_id, opts)
      return data
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conversation_id conversationId
    # @return [Array<(EstimatedWaitTimePredictions, Fixnum, Hash)>] EstimatedWaitTimePredictions data, response status code and response headers
    def get_routing_queue_estimatedwaittime_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_estimatedwaittime ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_estimatedwaittime" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/estimatedwaittime".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'conversationId'] = opts[:'conversation_id'] if opts[:'conversation_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstimatedWaitTimePredictions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_estimatedwaittime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param media_type mediaType
    # @param [Hash] opts the optional parameters
    # @return [EstimatedWaitTimePredictions]
    def get_routing_queue_mediatype_estimatedwaittime(queue_id, media_type, opts = {})
      data, _status_code, _headers = get_routing_queue_mediatype_estimatedwaittime_with_http_info(queue_id, media_type, opts)
      return data
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param media_type mediaType
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimatedWaitTimePredictions, Fixnum, Hash)>] EstimatedWaitTimePredictions data, response status code and response headers
    def get_routing_queue_mediatype_estimatedwaittime_with_http_info(queue_id, media_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_mediatype_estimatedwaittime ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_mediatype_estimatedwaittime" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'media_type' is set
      fail ArgumentError, "Missing the required parameter 'media_type' when calling RoutingApi.get_routing_queue_mediatype_estimatedwaittime" if media_type.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'mediaType' + '}', media_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstimatedWaitTimePredictions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_mediatype_estimatedwaittime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the members of this queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [Array<String>] :expand Which fields, if any, to expand.
    # @option opts [BOOLEAN] :joined Filter by joined status
    # @option opts [String] :name Filter by queue member name
    # @option opts [Array<String>] :profile_skills Filter by profile skill
    # @option opts [Array<String>] :skills Filter by skill
    # @option opts [Array<String>] :languages Filter by language
    # @option opts [Array<String>] :routing_status Filter by routing status
    # @option opts [Array<String>] :presence Filter by presence
    # @return [QueueMemberEntityListing]
    def get_routing_queue_users(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_users_with_http_info(queue_id, opts)
      return data
    end

    # Get the members of this queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [Array<String>] :expand Which fields, if any, to expand.
    # @option opts [BOOLEAN] :joined Filter by joined status
    # @option opts [String] :name Filter by queue member name
    # @option opts [Array<String>] :profile_skills Filter by profile skill
    # @option opts [Array<String>] :skills Filter by skill
    # @option opts [Array<String>] :languages Filter by language
    # @option opts [Array<String>] :routing_status Filter by routing status
    # @option opts [Array<String>] :presence Filter by presence
    # @return [Array<(QueueMemberEntityListing, Fixnum, Hash)>] QueueMemberEntityListing data, response status code and response headers
    def get_routing_queue_users_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_users ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_users" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'joined'] = opts[:'joined'] if opts[:'joined']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'profileSkills'] = @api_client.build_collection_param(opts[:'profile_skills'], :multi) if opts[:'profile_skills']
      query_params[:'skills'] = @api_client.build_collection_param(opts[:'skills'], :multi) if opts[:'skills']
      query_params[:'languages'] = @api_client.build_collection_param(opts[:'languages'], :multi) if opts[:'languages']
      query_params[:'routingStatus'] = @api_client.build_collection_param(opts[:'routing_status'], :multi) if opts[:'routing_status']
      query_params[:'presence'] = @api_client.build_collection_param(opts[:'presence'], :multi) if opts[:'presence']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMemberEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up codes for a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @return [WrapupCodeEntityListing]
    def get_routing_queue_wrapupcodes(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_wrapupcodes_with_http_info(queue_id, opts)
      return data
    end

    # Get the wrap-up codes for a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCodeEntityListing, Fixnum, Hash)>] WrapupCodeEntityListing data, response status code and response headers
    def get_routing_queue_wrapupcodes_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_wrapupcodes" if queue_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/wrapupcodes".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCodeEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of queues.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :active Active
    # @return [QueueEntityListing]
    def get_routing_queues(opts = {})
      data, _status_code, _headers = get_routing_queues_with_http_info(opts)
      return data
    end

    # Get list of queues.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :active Active
    # @return [Array<(QueueEntityListing, Fixnum, Hash)>] QueueEntityListing data, response status code and response headers
    def get_routing_queues_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queues ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'active'] = opts[:'active'] if opts[:'active']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [RoutingSkill]
    def get_routing_skill(skill_id, opts = {})
      data, _status_code, _headers = get_routing_skill_with_http_info(skill_id, opts)
      return data
    end

    # Get Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingSkill, Fixnum, Hash)>] RoutingSkill data, response status code and response headers
    def get_routing_skill_with_http_info(skill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_skill ..."
      end
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.get_routing_skill" if skill_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills/{skillId}".sub('{format}','json').sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_skill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of routing skills.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :name Filter for results that start with this value
    # @return [SkillEntityListing]
    def get_routing_skills(opts = {})
      data, _status_code, _headers = get_routing_skills_with_http_info(opts)
      return data
    end

    # Get the list of routing skills.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :name Filter for results that start with this value
    # @return [Array<(SkillEntityListing, Fixnum, Hash)>] SkillEntityListing data, response status code and response headers
    def get_routing_skills_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_skills ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'name'] = opts[:'name'] if opts[:'name']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SkillEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_skills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the utilization settings.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Utilization]
    def get_routing_utilization(opts = {})
      data, _status_code, _headers = get_routing_utilization_with_http_info(opts)
      return data
    end

    # Get the utilization settings.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Utilization, Fixnum, Hash)>] Utilization data, response status code and response headers
    def get_routing_utilization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_utilization ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/utilization".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Utilization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details about this wrap-up code.
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [WrapupCode]
    def get_routing_wrapupcode(code_id, opts = {})
      data, _status_code, _headers = get_routing_wrapupcode_with_http_info(code_id, opts)
      return data
    end

    # Get details about this wrap-up code.
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCode, Fixnum, Hash)>] WrapupCode data, response status code and response headers
    def get_routing_wrapupcode_with_http_info(code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_wrapupcode ..."
      end
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.get_routing_wrapupcode" if code_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :name Name
    # @option opts [String] :sort_by Sort by (default to name)
    # @return [WrapupCodeEntityListing]
    def get_routing_wrapupcodes(opts = {})
      data, _status_code, _headers = get_routing_wrapupcodes_with_http_info(opts)
      return data
    end

    # Get list of wrapup codes.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :name Name
    # @option opts [String] :sort_by Sort by
    # @return [Array<(WrapupCodeEntityListing, Fixnum, Hash)>] WrapupCodeEntityListing data, response status code and response headers
    def get_routing_wrapupcodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_wrapupcodes ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCodeEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List routing skills for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_order Ascending or descending sort order (default to ASC)
    # @return [UserSkillEntityListing]
    def get_user_routingskills(user_id, opts = {})
      data, _status_code, _headers = get_user_routingskills_with_http_info(user_id, opts)
      return data
    end

    # List routing skills for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_order Ascending or descending sort order
    # @return [Array<(UserSkillEntityListing, Fixnum, Hash)>] UserSkillEntityListing data, response status code and response headers
    def get_user_routingskills_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_user_routingskills ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.get_user_routingskills" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['ascending', 'descending'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ascending, descending'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserSkillEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_user_routingskills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the ring number of joined status for a User in a Queue
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param body Queue Member
    # @param [Hash] opts the optional parameters
    # @return [QueueMember]
    def patch_routing_queue_user(queue_id, member_id, body, opts = {})
      data, _status_code, _headers = patch_routing_queue_user_with_http_info(queue_id, member_id, body, opts)
      return data
    end

    # Update the ring number of joined status for a User in a Queue
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param body Queue Member
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMember, Fixnum, Hash)>] QueueMember data, response status code and response headers
    def patch_routing_queue_user_with_http_info(queue_id, member_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_routing_queue_user ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.patch_routing_queue_user" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling RoutingApi.patch_routing_queue_user" if member_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_routing_queue_user" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users/{memberId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'memberId' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_routing_queue_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join or unjoin a set of users for a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @return [QueueMemberEntityListing]
    def patch_routing_queue_users(queue_id, body, opts = {})
      data, _status_code, _headers = patch_routing_queue_users_with_http_info(queue_id, body, opts)
      return data
    end

    # Join or unjoin a set of users for a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMemberEntityListing, Fixnum, Hash)>] QueueMemberEntityListing data, response status code and response headers
    def patch_routing_queue_users_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_routing_queue_users ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.patch_routing_queue_users" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_routing_queue_users" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMemberEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_routing_queue_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for queue observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [QualifierMappingObservationQueryResponse]
    def post_analytics_queues_observations_query(body, opts = {})
      data, _status_code, _headers = post_analytics_queues_observations_query_with_http_info(body, opts)
      return data
    end

    # Query for queue observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualifierMappingObservationQueryResponse, Fixnum, Hash)>] QualifierMappingObservationQueryResponse data, response status code and response headers
    def post_analytics_queues_observations_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_analytics_queues_observations_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_analytics_queues_observations_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/queues/observations/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualifierMappingObservationQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_analytics_queues_observations_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a route
    # 
    # @param domain_name email domain
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [InboundRoute]
    def post_routing_email_domain_routes(domain_name, body, opts = {})
      data, _status_code, _headers = post_routing_email_domain_routes_with_http_info(domain_name, body, opts)
      return data
    end

    # Create a route
    # 
    # @param domain_name email domain
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundRoute, Fixnum, Hash)>] InboundRoute data, response status code and response headers
    def post_routing_email_domain_routes_with_http_info(domain_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_email_domain_routes ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.post_routing_email_domain_routes" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_email_domain_routes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_email_domain_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a domain
    # 
    # @param body Domain
    # @param [Hash] opts the optional parameters
    # @return [InboundDomain]
    def post_routing_email_domains(body, opts = {})
      data, _status_code, _headers = post_routing_email_domains_with_http_info(body, opts)
      return data
    end

    # Create a domain
    # 
    # @param body Domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomain, Fixnum, Hash)>] InboundDomain data, response status code and response headers
    def post_routing_email_domains_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_email_domains ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_email_domains" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_email_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Language
    # 
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Language]
    def post_routing_languages(body, opts = {})
      data, _status_code, _headers = post_routing_languages_with_http_info(body, opts)
      return data
    end

    # Create Language
    # 
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Array<(Language, Fixnum, Hash)>] Language data, response status code and response headers
    def post_routing_languages_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_languages ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_languages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/languages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Language')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk add or delete up to 100 queue members
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete True to delete queue members (default to false)
    # @return [String]
    def post_routing_queue_users(queue_id, body, opts = {})
      data, _status_code, _headers = post_routing_queue_users_with_http_info(queue_id, body, opts)
      return data
    end

    # Bulk add or delete up to 100 queue members
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete True to delete queue members
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_routing_queue_users_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_queue_users ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.post_routing_queue_users" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_queue_users" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'delete'] = opts[:'delete'] if opts[:'delete']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_queue_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add up to 100 wrap-up codes to a queue
    # 
    # @param queue_id Queue ID
    # @param body List of wrapup codes
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def post_routing_queue_wrapupcodes(queue_id, body, opts = {})
      data, _status_code, _headers = post_routing_queue_wrapupcodes_with_http_info(queue_id, body, opts)
      return data
    end

    # Add up to 100 wrap-up codes to a queue
    # 
    # @param queue_id Queue ID
    # @param body List of wrapup codes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def post_routing_queue_wrapupcodes_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_queue_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.post_routing_queue_wrapupcodes" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_queue_wrapupcodes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/wrapupcodes".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_queue_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create queue
    # 
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def post_routing_queues(body, opts = {})
      data, _status_code, _headers = post_routing_queues_with_http_info(body, opts)
      return data
    end

    # Create queue
    # 
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def post_routing_queues_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_queues ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_queues" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Skill
    # 
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [RoutingSkill]
    def post_routing_skills(body, opts = {})
      data, _status_code, _headers = post_routing_skills_with_http_info(body, opts)
      return data
    end

    # Create Skill
    # 
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingSkill, Fixnum, Hash)>] RoutingSkill data, response status code and response headers
    def post_routing_skills_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_skills ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_skills" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_skills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a wrap-up code
    # 
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [WrapupCode]
    def post_routing_wrapupcodes(body, opts = {})
      data, _status_code, _headers = post_routing_wrapupcodes_with_http_info(body, opts)
      return data
    end

    # Create a wrap-up code
    # 
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCode, Fixnum, Hash)>] WrapupCode data, response status code and response headers
    def post_routing_wrapupcodes_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_wrapupcodes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add routing skill to user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [UserRoutingSkill]
    def post_user_routingskills(user_id, body, opts = {})
      data, _status_code, _headers = post_user_routingskills_with_http_info(user_id, body, opts)
      return data
    end

    # Add routing skill to user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRoutingSkill, Fixnum, Hash)>] UserRoutingSkill data, response status code and response headers
    def post_user_routingskills_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_user_routingskills ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.post_user_routingskills" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_user_routingskills" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_user_routingskills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [InboundRoute]
    def put_routing_email_domain_route(domain_name, route_id, body, opts = {})
      data, _status_code, _headers = put_routing_email_domain_route_with_http_info(domain_name, route_id, body, opts)
      return data
    end

    # Update a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundRoute, Fixnum, Hash)>] InboundRoute data, response status code and response headers
    def put_routing_email_domain_route_with_http_info(domain_name, route_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_email_domain_route ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.put_routing_email_domain_route" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'route_id' is set
      fail ArgumentError, "Missing the required parameter 'route_id' when calling RoutingApi.put_routing_email_domain_route" if route_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_email_domain_route" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s).sub('{' + 'routeId' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_email_domain_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def put_routing_queue(queue_id, body, opts = {})
      data, _status_code, _headers = put_routing_queue_with_http_info(queue_id, body, opts)
      return data
    end

    # Update a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def put_routing_queue_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.put_routing_queue" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_queue" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the utilization settings.
    # 
    # @param body utilization
    # @param [Hash] opts the optional parameters
    # @return [Utilization]
    def put_routing_utilization(body, opts = {})
      data, _status_code, _headers = put_routing_utilization_with_http_info(body, opts)
      return data
    end

    # Update the utilization settings.
    # 
    # @param body utilization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Utilization, Fixnum, Hash)>] Utilization data, response status code and response headers
    def put_routing_utilization_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_utilization ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_utilization" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/utilization".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Utilization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [WrapupCode]
    def put_routing_wrapupcode(code_id, body, opts = {})
      data, _status_code, _headers = put_routing_wrapupcode_with_http_info(code_id, body, opts)
      return data
    end

    # Update wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCode, Fixnum, Hash)>] WrapupCode data, response status code and response headers
    def put_routing_wrapupcode_with_http_info(code_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_wrapupcode ..."
      end
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.put_routing_wrapupcode" if code_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_wrapupcode" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update routing skill proficiency or state.
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [UserRoutingSkill]
    def put_user_routingskill(user_id, skill_id, body, opts = {})
      data, _status_code, _headers = put_user_routingskill_with_http_info(user_id, skill_id, body, opts)
      return data
    end

    # Update routing skill proficiency or state.
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRoutingSkill, Fixnum, Hash)>] UserRoutingSkill data, response status code and response headers
    def put_user_routingskill_with_http_info(user_id, skill_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_user_routingskill ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.put_user_routingskill" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.put_user_routingskill" if skill_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_user_routingskill" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills/{skillId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_user_routingskill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
