=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: ININ
http://www.inin.com

Terms of Service: https://developer.mypurecloud.com/tos

=end

require "uri"

module PureCloud
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_analytics_reporting_schedule(schedule_id, opts = {})
      delete_analytics_reporting_schedule_with_http_info(schedule_id, opts)
      return nil
    end

    # Delete a scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_analytics_reporting_schedule_with_http_info(schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.delete_analytics_reporting_schedule ..."
      end
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.delete_analytics_reporting_schedule" if schedule_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#delete_analytics_reporting_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a conversation by id
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsConversation]
    def get_analytics_conversation_details(conversation_id, opts = {})
      data, _status_code, _headers = get_analytics_conversation_details_with_http_info(conversation_id, opts)
      return data
    end

    # Get a conversation by id
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsConversation, Fixnum, Hash)>] AnalyticsConversation data, response status code and response headers
    def get_analytics_conversation_details_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_conversation_details ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling AnalyticsApi.get_analytics_conversation_details" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/{conversationId}/details".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_conversation_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of reporting metadata.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [String] :locale Locale
    # @return [ReportMetaDataEntityListing]
    def get_analytics_reporting_metadata(opts = {})
      data, _status_code, _headers = get_analytics_reporting_metadata_with_http_info(opts)
      return data
    end

    # Get list of reporting metadata.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number
    # @option opts [Integer] :page_size Page size
    # @option opts [String] :locale Locale
    # @return [Array<(ReportMetaDataEntityListing, Fixnum, Hash)>] ReportMetaDataEntityListing data, response status code and response headers
    def get_analytics_reporting_metadata_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_metadata ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/metadata".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'locale'] = opts[:'locale'] if opts[:'locale']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportMetaDataEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a reporting metadata.
    # 
    # @param report_id Report ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale Locale
    # @return [ReportMetaData]
    def get_analytics_reporting_report_id_metadata(report_id, opts = {})
      data, _status_code, _headers = get_analytics_reporting_report_id_metadata_with_http_info(report_id, opts)
      return data
    end

    # Get a reporting metadata.
    # 
    # @param report_id Report ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale Locale
    # @return [Array<(ReportMetaData, Fixnum, Hash)>] ReportMetaData data, response status code and response headers
    def get_analytics_reporting_report_id_metadata_with_http_info(report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_report_id_metadata ..."
      end
      
      
      # verify the required parameter 'report_id' is set
      fail ArgumentError, "Missing the required parameter 'report_id' when calling AnalyticsApi.get_analytics_reporting_report_id_metadata" if report_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/{reportId}/metadata".sub('{format}','json').sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'locale'] = opts[:'locale'] if opts[:'locale']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportMetaData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_report_id_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of report formats
    # Get a list of report formats.
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_analytics_reporting_reportformats(opts = {})
      data, _status_code, _headers = get_analytics_reporting_reportformats_with_http_info(opts)
      return data
    end

    # Get a list of report formats
    # Get a list of report formats.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_analytics_reporting_reportformats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_reportformats ..."
      end
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/reportformats".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_reportformats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [ReportSchedule]
    def get_analytics_reporting_schedule(schedule_id, opts = {})
      data, _status_code, _headers = get_analytics_reporting_schedule_with_http_info(schedule_id, opts)
      return data
    end

    # Get a scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportSchedule, Fixnum, Hash)>] ReportSchedule data, response status code and response headers
    def get_analytics_reporting_schedule_with_http_info(schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_schedule ..."
      end
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.get_analytics_reporting_schedule" if schedule_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportSchedule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of completed scheduled report jobs.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number  (default to 1)
    # @option opts [Integer] :page_size  (default to 25)
    # @return [ReportRunEntryEntityDomainListing]
    def get_analytics_reporting_schedule_history(schedule_id, opts = {})
      data, _status_code, _headers = get_analytics_reporting_schedule_history_with_http_info(schedule_id, opts)
      return data
    end

    # Get list of completed scheduled report jobs.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number 
    # @option opts [Integer] :page_size 
    # @return [Array<(ReportRunEntryEntityDomainListing, Fixnum, Hash)>] ReportRunEntryEntityDomainListing data, response status code and response headers
    def get_analytics_reporting_schedule_history_with_http_info(schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_schedule_history ..."
      end
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.get_analytics_reporting_schedule_history" if schedule_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportRunEntryEntityDomainListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_schedule_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get most recently completed scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [ReportRunEntry]
    def get_analytics_reporting_schedule_history_latest(schedule_id, opts = {})
      data, _status_code, _headers = get_analytics_reporting_schedule_history_latest_with_http_info(schedule_id, opts)
      return data
    end

    # Get most recently completed scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportRunEntry, Fixnum, Hash)>] ReportRunEntry data, response status code and response headers
    def get_analytics_reporting_schedule_history_latest_with_http_info(schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_schedule_history_latest ..."
      end
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.get_analytics_reporting_schedule_history_latest" if schedule_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history/latest".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportRunEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_schedule_history_latest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # A completed scheduled report job
    # A completed scheduled report job.
    # @param run_id Run ID
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [ReportRunEntry]
    def get_analytics_reporting_schedule_history_run_id(run_id, schedule_id, opts = {})
      data, _status_code, _headers = get_analytics_reporting_schedule_history_run_id_with_http_info(run_id, schedule_id, opts)
      return data
    end

    # A completed scheduled report job
    # A completed scheduled report job.
    # @param run_id Run ID
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportRunEntry, Fixnum, Hash)>] ReportRunEntry data, response status code and response headers
    def get_analytics_reporting_schedule_history_run_id_with_http_info(run_id, schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_schedule_history_run_id ..."
      end
      
      
      # verify the required parameter 'run_id' is set
      fail ArgumentError, "Missing the required parameter 'run_id' when calling AnalyticsApi.get_analytics_reporting_schedule_history_run_id" if run_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.get_analytics_reporting_schedule_history_run_id" if schedule_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}".sub('{format}','json').sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportRunEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_schedule_history_run_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of scheduled report jobs
    # Get a list of scheduled report jobs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [Integer] :page_size Page size (default to 25)
    # @return [ReportScheduleEntityListing]
    def get_analytics_reporting_schedules(opts = {})
      data, _status_code, _headers = get_analytics_reporting_schedules_with_http_info(opts)
      return data
    end

    # Get a list of scheduled report jobs
    # Get a list of scheduled report jobs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number
    # @option opts [Integer] :page_size Page size
    # @return [Array<(ReportScheduleEntityListing, Fixnum, Hash)>] ReportScheduleEntityListing data, response status code and response headers
    def get_analytics_reporting_schedules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_schedules ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportScheduleEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of report time periods.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_analytics_reporting_timeperiods(opts = {})
      data, _status_code, _headers = get_analytics_reporting_timeperiods_with_http_info(opts)
      return data
    end

    # Get a list of report time periods.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_analytics_reporting_timeperiods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.get_analytics_reporting_timeperiods ..."
      end
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/timeperiods".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_analytics_reporting_timeperiods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Index conversation properties
    # 
    # @param conversation_id conversationId
    # @param body request
    # @param [Hash] opts the optional parameters
    # @return [PropertyIndexRequest]
    def post_analytics_conversation_details_properties(conversation_id, body, opts = {})
      data, _status_code, _headers = post_analytics_conversation_details_properties_with_http_info(conversation_id, body, opts)
      return data
    end

    # Index conversation properties
    # 
    # @param conversation_id conversationId
    # @param body request
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyIndexRequest, Fixnum, Hash)>] PropertyIndexRequest data, response status code and response headers
    def post_analytics_conversation_details_properties_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_conversation_details_properties ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling AnalyticsApi.post_analytics_conversation_details_properties" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_conversation_details_properties" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/{conversationId}/details/properties".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertyIndexRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_conversation_details_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for conversation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [AggregateQueryResponse]
    def post_analytics_conversations_aggregates_query(body, opts = {})
      data, _status_code, _headers = post_analytics_conversations_aggregates_query_with_http_info(body, opts)
      return data
    end

    # Query for conversation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregateQueryResponse, Fixnum, Hash)>] AggregateQueryResponse data, response status code and response headers
    def post_analytics_conversations_aggregates_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_conversations_aggregates_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_conversations_aggregates_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/aggregates/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_conversations_aggregates_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for conversation details
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsConversationQueryResponse]
    def post_analytics_conversations_details_query(body, opts = {})
      data, _status_code, _headers = post_analytics_conversations_details_query_with_http_info(body, opts)
      return data
    end

    # Query for conversation details
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsConversationQueryResponse, Fixnum, Hash)>] AnalyticsConversationQueryResponse data, response status code and response headers
    def post_analytics_conversations_details_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_conversations_details_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_conversations_details_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsConversationQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_conversations_details_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for evaluation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [AggregateQueryResponse]
    def post_analytics_evaluations_aggregates_query(body, opts = {})
      data, _status_code, _headers = post_analytics_evaluations_aggregates_query_with_http_info(body, opts)
      return data
    end

    # Query for evaluation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregateQueryResponse, Fixnum, Hash)>] AggregateQueryResponse data, response status code and response headers
    def post_analytics_evaluations_aggregates_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_evaluations_aggregates_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_evaluations_aggregates_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/evaluations/aggregates/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_evaluations_aggregates_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for queue observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [QualifierMappingObservationQueryResponse]
    def post_analytics_queues_observations_query(body, opts = {})
      data, _status_code, _headers = post_analytics_queues_observations_query_with_http_info(body, opts)
      return data
    end

    # Query for queue observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualifierMappingObservationQueryResponse, Fixnum, Hash)>] QualifierMappingObservationQueryResponse data, response status code and response headers
    def post_analytics_queues_observations_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_queues_observations_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_queues_observations_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/queues/observations/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualifierMappingObservationQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_queues_observations_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Place a scheduled report immediately into the reporting queue
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [RunNowResponse]
    def post_analytics_reporting_schedule_runreport(schedule_id, opts = {})
      data, _status_code, _headers = post_analytics_reporting_schedule_runreport_with_http_info(schedule_id, opts)
      return data
    end

    # Place a scheduled report immediately into the reporting queue
    # 
    # @param schedule_id Schedule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RunNowResponse, Fixnum, Hash)>] RunNowResponse data, response status code and response headers
    def post_analytics_reporting_schedule_runreport_with_http_info(schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_reporting_schedule_runreport ..."
      end
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.post_analytics_reporting_schedule_runreport" if schedule_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}/runreport".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RunNowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_reporting_schedule_runreport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a scheduled report job
    # Create a scheduled report job.
    # @param body ReportSchedule
    # @param [Hash] opts the optional parameters
    # @return [ReportSchedule]
    def post_analytics_reporting_schedules(body, opts = {})
      data, _status_code, _headers = post_analytics_reporting_schedules_with_http_info(body, opts)
      return data
    end

    # Create a scheduled report job
    # Create a scheduled report job.
    # @param body ReportSchedule
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportSchedule, Fixnum, Hash)>] ReportSchedule data, response status code and response headers
    def post_analytics_reporting_schedules_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_reporting_schedules ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_reporting_schedules" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportSchedule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_reporting_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for user aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [PresenceQueryResponse]
    def post_analytics_users_aggregates_query(body, opts = {})
      data, _status_code, _headers = post_analytics_users_aggregates_query_with_http_info(body, opts)
      return data
    end

    # Query for user aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(PresenceQueryResponse, Fixnum, Hash)>] PresenceQueryResponse data, response status code and response headers
    def post_analytics_users_aggregates_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_users_aggregates_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_users_aggregates_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/users/aggregates/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PresenceQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_users_aggregates_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for user details
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsUserDetailsQueryResponse]
    def post_analytics_users_details_query(body, opts = {})
      data, _status_code, _headers = post_analytics_users_details_query_with_http_info(body, opts)
      return data
    end

    # Query for user details
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsUserDetailsQueryResponse, Fixnum, Hash)>] AnalyticsUserDetailsQueryResponse data, response status code and response headers
    def post_analytics_users_details_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_users_details_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_users_details_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/users/details/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsUserDetailsQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_users_details_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for user observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [ObservationQueryResponse]
    def post_analytics_users_observations_query(body, opts = {})
      data, _status_code, _headers = post_analytics_users_observations_query_with_http_info(body, opts)
      return data
    end

    # Query for user observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObservationQueryResponse, Fixnum, Hash)>] ObservationQueryResponse data, response status code and response headers
    def post_analytics_users_observations_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.post_analytics_users_observations_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.post_analytics_users_observations_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/users/observations/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObservationQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#post_analytics_users_observations_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param body ReportSchedule
    # @param [Hash] opts the optional parameters
    # @return [ReportSchedule]
    def put_analytics_reporting_schedule(schedule_id, body, opts = {})
      data, _status_code, _headers = put_analytics_reporting_schedule_with_http_info(schedule_id, body, opts)
      return data
    end

    # Update a scheduled report job.
    # 
    # @param schedule_id Schedule ID
    # @param body ReportSchedule
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportSchedule, Fixnum, Hash)>] ReportSchedule data, response status code and response headers
    def put_analytics_reporting_schedule_with_http_info(schedule_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsApi.put_analytics_reporting_schedule ..."
      end
      
      
      # verify the required parameter 'schedule_id' is set
      fail ArgumentError, "Missing the required parameter 'schedule_id' when calling AnalyticsApi.put_analytics_reporting_schedule" if schedule_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AnalyticsApi.put_analytics_reporting_schedule" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/reporting/schedules/{scheduleId}".sub('{format}','json').sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud Auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportSchedule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#put_analytics_reporting_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
